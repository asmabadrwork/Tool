pipeline {
  agent any

  environment {
    ANSIBLE_CONFIG = "${WORKSPACE}/sonar/ansible/ansible.cfg"
    ANSIBLE_PYTHON_INTERPRETER = "/usr/bin/python3"
    PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" // Ensure pip-installed binaries are visible
  }

  stages {
    stage('Terraform Init & Apply') {
      steps {
        dir('sonar/terraform') {
          sh 'terraform init'
          sh 'terraform apply -auto-approve'
        }
      }
    }

    stage('Wait for EC2 Initialization') {
      steps {
        script {
          echo "Waiting 5 minutes for EC2 to fully initialize (cloud-init, SSH, networking)..."
          sleep(time: 5, unit: "MINUTES")
        }
      }
    }

    stage('Ansible Inventory Check') {
      steps {
        dir('sonar/ansible') {
          sh 'ansible-inventory -i aws_ec2.yaml --graph -e ansible_python_interpreter=${ANSIBLE_PYTHON_INTERPRETER}'
          sh 'ansible -i aws_ec2.yaml tag_SonarQube_Server -m ping -e ansible_python_interpreter=${ANSIBLE_PYTHON_INTERPRETER}'
        }
      }
    }

    stage('Ansible Provisioning') {
      steps {
        dir('sonar/ansible') {
          script {
            try {
              sh 'ansible-playbook -i aws_ec2.yaml playbook.yml -e ansible_python_interpreter=${ANSIBLE_PYTHON_INTERPRETER}'
            } catch (Exception e) {
              echo "Provisioning failed: ${e.getMessage()}"
              currentBuild.result = 'FAILURE'
            }
          }
        }
      }
    }
  }
}
